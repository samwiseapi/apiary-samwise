FORMAT: 1A
HOST: http://polls.apiblueprint.org/

#  Samwise Web API

This document describes Samwise system WebAPI. Developers should refer to [this reference](https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdf)  for
the guidelines about how to design good API. Please maintain good and coherent writing style.

<!-- This is a comment -->

# Group Sample Types, Events, Flags, Statuses API

This section describes operations to retrieve sample types, events, statuses and flags. These operations provide client with information about sample related enumerations.

## Sample Types [/sampletypes]

### Get All Sample Types [GET]

Fetches all currently stored sample types items 

+ Response 200 (application/json)
    + Attributes
        + SampleTypes: array[SampleTypeDto] (array[SampleTypeDto], required) - Array of SampleTypeDto 
    
+ Response 404 (application/json)

        Sample types not found.
 
## Sample Event, Status, Flag List [/sampleproperties]

### Get Sample Event , Status, Flags List [GET]

Fetches all currently stored sample events, statuses and flags. Grouped in one request as they will be loaded on UI load.

+ Response 200 (application/json)
    + Attributes (object)
        + SampleEvents: array[SampleEventDto] (array[SampleEventDto], required) - Array of SampleEventDto
        + SampleStatus: array[SampleStatusDto] (array[SampleStatusDto], required) - Array of SampleStatusDto
        + SampleFlags: array[SampleFlagDto] ( array[SampleFlagDto], required) - Array of SampleFlagDto
    
+ Response 404 (application/json)

        Sample properties not found.


# Group Sample API  

This section describes sample-related operations.    

## Project Sample Retrieval [/projects/{projectId}/samples/{?sampleId}]  

+ Parameters

    + projectId (int, `1`) ... Project ID
    + sampleId (optional, int, `124357891`) ... Sample ID to return full information
 


### Get samples [GET]

Returns specified sampleId if it belongs to given project. If no sampleId is specified, return all samples of given project.

 
+ Response 200 (application/json)
    + Attributes (SampleDto)
    
+ Response 404 (application/json)
        
        Sample in request does not exist in current project, or if no SampleId is specified -  project does not have samples.
 

### Create arbitrary set of samples inside given project [POST]

This method facilitates the scenario, when a random set of samples is created, each sample can belong to arbitrary subject or created without subject attached. 
The entities must belong to one project.


### Create set of samples for many subjects inside given project [POST]

This method facilitates the scenario, when a fixed set of samples is created for number of subjects, so every subject receives same set of samples. Subjects are created 
if not found. If no subject is given, samples set is created without attachment to any subject. The entities must belong to one project.


# Data Structures
## SampleTypeDto (object)
Definition of SampleType 
+ Id: 12345678 (number) - Unique key
+ Label: myLabel (string) - Free text for End User
+ LocalizationNameKey: myName (string) - Localized name key for the sample types
+ Localization Description Key: myDescription (string) - Localized description key for the sample types 

## SampleEventDto (object)
Definition of Sample Event
+ Id: 12345678 (number) - Unique key
+ Label: myLabel (string) - Free text for End User
+ LocalizationNameKey: myName (string) - Localized name key for the sample event

## SampleStatusDto (object)
Definition of Sample Status
+ Id: 12345678 (number) - Unique key
+ Label: myLabel (string) - Free text for End User
+ LocalizationNameKey: myName (string) - Localized name key for the sample status

## SampleFlagDto (object)
Definition of Sample Flag
+ Id: 12345678 (number) - Unique key
+ Label: myLabel (string) - Free text for End User
+ LocalizationNameKey: myName (string) - Localized name key for the sample flag

## SamplePropertiesDto (object)
Definition of Sample Properties
+ ExternalSampleId: 12A4  (string, optional) - External Sample Id, such as parallel barcode from different system
+ ExternalSubjectId: 21az (string,optional) - External Subject Id, such as parallel identifier from different system
+ NumberOfVisits: 1 (number, optional) - Number Of Visits (?)
+ TimePointUnitId: 1 (number) -  Identifier of unit used in Time Point  
+ SampleAmountUnitId: 1 (number) - Sample Amount Unit Id, int (This relates to a table that contains all the sample units (volume,mass,concentration...))
+ SampleAmount: 0.001 (number) - Sample amount
+ Aliquote: 'A123' (optional, string) - aliquote string
+ SampleTypeId (required, number) - Sample Type identifier


## SampleDto (object)
Definition of sample
+ SampleId: 123456789 (number,  required)  - Sample ID
+ SampleProperties: SamplePropertiesDto (SamplePropertiesDto, optional) - SamplePropertiesDto
+ ClientSampleId: 1 (number, optional) - Identifier of Sample ID received from client in request
+ Events: SampleEventsDto (SampleEventsDto, optional) - Collection of sample events 

## SampleEventsDto (array)
Decribes sample event , TODO Rename
+ EventId: 5 (number, required) - Event ID
+ Timestamp:  "2050-02-18T21:00:42Z" (datetime, required) - Timestamp

## SampleStatusResponseDto


## SaveSampleResponseDto
In 29.4 api SaveResponseDto 
+ Samples: array[SampleDTO] (array[SampleDto], required) - Array of SampleDto, sample properties required in SampleDto 
+ Subjects: array[


## ProjectSubjectIdDto
Describes Project Subject
+ projectId: 23 (number, required) - Project 
+ prefix: "HUMAN"

 